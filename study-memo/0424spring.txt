0424
Spring
IOC : Inversion of control
제어의 역전 (DI &DL) DI가 중요
DL(Dependency Lookup)
DI(Dependency Injection)

Dependency(의존)
 - 코드에서 두 모듈 간의 연결
 - 객체와 객체의 결합관계
    - 한 객체가 다른 객체의 변수나 메소드를 이용하려 한다면 	다른 객체의 레퍼런스 정보가 필요
단점
 - 하나의 모듈이 수정되면 의존하는 모듈까지 변경
 - 테스트 가능한 어플을 만들 때 의존성이 있으면 유닛테스트                작성 어려움
 - 유닛테스트의 목적 자체가 다른 모듈로부터 독립적으로 테스트하는 것을 요구하기 때문

DAO 퍼시스턴스 계층

Model
 - 데이터처리를 담당하는 부분
 - service 영역/ DAO영역
 - 불필요하게 HTTP통신을 지양하고 req, resp와 같은 객체를 매개변수로 사용불가
 - View와 Controller의 정보 미포함
 - view에 종속적인 코드가 없어야 하고 view가 변경되더라도 내용이 남아있음?

POJO
 - Plain Old Java Object(오래된 방식의 간단한 자바 오브젝트)

View (사용자 인터페이스 담당)

동작 구조
client -> dispatcher servlet -> controller -> service -> dao
->service -> controller -> dispatcher servlet -> jsp(view)->client

resources
정적 이미지 같은 것들이 들어오는 공간
application.properties - 설정파일(꼭 그렇다는건 아님)

@Bean
@Configuration : 각종 설정 복사하는 기능???? 복사하고 나니 지움
@SpringBootApplication : @Configuration + 
@EnableAutoConfiguration
@SpringBootApplication : 
@Configuration(각종 설정) 
+ @EnableAutoConfiguration(application context 관련 자동 설정)
+ @ComponentScan
	(@Component @Configuration이 붙은 클래스를 스캔하여 빈 등록)

@Component //이 어노테이션이 달려있는 것들은 전부다 bean으로 설정해줌

@Component("printerA") - 해주는 이유?

@Autowired - bean객체를 자동으로 찾아주는 어노테이션

@Qualifier - Autowired를 사용하면 자동적으로 따라옴?
	autowired를 했을 때 어디로 갈지 명확하지 않을때 설정해주려고 있는 어노테이션

포트넘버 설정
server.port=8083

@Controller

@Controller
public class DIController {
	@Autowired
	Member member1;//member1이 component 되있기 때문에 생성자 사용하듯 안 써도 된다. 등록되있는 빈 객체를 알아서 찾아줌

@RequestMapping - 주소매핑/는?

@ResponseBody - 







