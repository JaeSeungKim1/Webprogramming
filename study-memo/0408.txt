0406

useBean 자바빈즈를 사용할 때 사용

setProperty 자바빈즈의 프로퍼티 값 수정

forward  현재 페이지에서 다른 페이지로 제어를 이동

include 현재 페이지에 다른 페이지를 포함함

param forward,include 데이터 전달을 목적으로 사용

getProperty 자바빈즈의 프로퍼티 값 가져옴

MVC = Spring이 MVC 형태로 구조되어 작동하니 한번 확인

*	List가 가지고 있는 의미 찾아보기	*	

colspan
lowspan

psmt / stmt 차이에 대해서 기술하시오

where절을 쓸 수 없는 이유
dba 쪽에서는 쓸일이 없다?

서블릿?
 - 자바를 사용하여 웹페이지를 동적으로 생성하는 서버측 프로그램
 - 웹 클라이언트의 요청을 처리할 수 있는 클래스( jsp 파일을 말함)

 - 클라이언트로부터 최초 요청 시 단 한번 초기화되며 생성
 - WAS 내부의 서블릿 컨테이너에서 서블릿 객체 생성 후 초기화시에 init()메서드를 호출하는데 이 과정을 서블릿 로딩이라 함

이후 해당 서블릿 객체는 서블릿 컨테이너에서 대기하다가 동일 한 요청 시 service()메서드를 통해 요청을 처리

처음 클라이언트 요청 시
1. 최초요청(WAS(=서블릿 컨테이너)
2. 서블릿 컨테이너가 정보 값을 받고 
3. 내 서블릿을 만들려면 객체 생성 후 , init() 호출해서 정보값 초기화
 service() 호출함으로써 기존에 정보를 다시 가져오는 형태

서블릿 - 클라이언트의 요청을 servlet으로 직접 받아 호출하는 형태

MVC 패턴 
	Model
	View	- JSP파일이 담당(결과값을 보여주는 파일)
	Controller - Servlet(브라우저 요청을 받아 그 요청을 어떻게 처리 할 지 결정하는 요소로 사용됨)

doGet( ), doPost( )
 -> HTTP Method 대응하는 메서드를 오버라이딩하기도 함

forwarding을 할 때 사용하는 것
-> getRequestDispacher


Scope

Attribute [속성]  - 공유되는 데이터

o Scope [영역]
 - 데이터가 공유되는 범위 (=Attribute의 범위)
 - Application >> Session >> Request >> Page

o Page
  - 가장 좁은 범위
  - 4가지 영역 중 유일하게 내장 객체가 없다
  - 때문에 모든 영역에 사용가능한 pageContext 내장 객체를 통해 사용
  - Page는 지역변수 처럼 해당 page 에서만 사용이 가능 
  - forward가 될 경우 해당 Page scope에 지정된 변수는 사용할 수 없음.
  - httpServletRequest객체에 setAttribute() 메서드를 사용하여 변수를 저장 -> Request scope 저장

o Request
   - Request 내장 객체를 사용하며
   - 요청을 받아 웹 브라우저에서 응답할 때까지 변수 유지
   - 다음 페이지까지 값을 유지하고 넘어간다.

o Session
  - 세션이 유지되는 범위 안에서는 다른 페이지라도 
  - 객체(데이터)들을 공유할 수 있는 속성을 가지고 있음.
  
  - 1개의 웹 브라우저 ~ n개의 페이지 범위 내 공유 가능
  - 웹 브라우저 종료 시 세션이 삭제

o Application
  - 가장 넓은 공유 범위
  - 웹 어플리케이션이 실행되는 모든 범위 내 데이터가 공유
  - 데이터 오래 & 넓게 사용하고자 할 때 사용

o SetAttribute( )				-> GetAttribute( )
 1. 새로운 변수를 선언하고 값을 저장할 때
	request.setAttribute("name", "John") ; 
 2. 객체를 저장할 때
	Person p = new Person("John",25);
	request.setAttribute("Person", person); 

cookie의 기능 
Cookie는 웹 브라우저에서 웹 서버로 데이터를 전송할 수 있는 작은 텍스트 파일입니다. Cookie는 서버에서 생성되어 클라이언트(브라우저)에 저장되며, 그 이후에는 클라이언트가 서버에 요청을 보낼 때마다 서버로 전송됩니다. Cookie의 기능은 다음과 같습니다.

사용자 식별: Cookie는 사용자를 식별하는 데 사용됩니다. 로그인 정보, 사용자 이름, ID, 장바구니 등을 Cookie에 저장하여 해당 사용자가 다시 방문할 때마다 이전 정보를 불러올 수 있습니다.

세션 관리: 웹 사이트에서는 보통 사용자의 세션 정보를 유지해야 합니다. Cookie는 사용자의 세션 ID를 저장하여, 이전 요청에서 사용된 세션 ID를 참조하여 세션 정보를 관리할 수 있습니다.

개인화: Cookie는 사용자에게 맞춤형 콘텐츠를 제공하는 데 사용됩니다. 예를 들어 사용자의 취향에 따라 광고를 제공하거나, 사용자의 위치 정보를 이용해 지역별 정보를 제공할 수 있습니다.

사용자 추적: Cookie는 사용자의 행동을 추적하는 데 사용됩니다. 이를 이용해 사용자의 취향을 파악하거나, 마케팅 목적으로 사용자의 검색 기록 등을 추적할 수 있습니다.

상태 유지: 웹 사이트에서는 사용자의 상태를 유지해야 하는 경우가 있습니다. 예를 들어, 페이지의 스크롤 위치나 사용자가 선택한 옵션 등을 Cookie에 저장하여 페이지를 다시 로드할 때 이전 상태를 복원할 수 있습니다.

Cookie는 보안 문제가 있을 수 있기 때문에 중요한 정보를 담는 것은 좋지 않습니다. 또한, 사용자가 개인 정보 보호에 대해 우려를 표시할 경우, 사용자에게 Cookie의 수집 및 사용에 대한 동의를 구해야 합니다.

  
