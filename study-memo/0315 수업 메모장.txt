03/15	
용어 정리
script language
응용 소프트웨어를 제어하는 컴퓨터 프로그래밍 언어

호이스팅(hoisting):
인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미

JIT(Just In Time) 컴파일==동적 번역(dynamic translation)
실제 실행하는 시점에 기계어로 번역하는 컴파일 기법

Call back 함수
다른 코드의 인수로서 넘겨주는 실행 가능한 코드

ECMA Script
기술 규격에 따라 정의하고 있는 표준화된 스크립트 프로그래밍 언어

명령형 프로그래밍
"어떻게" 할당할 것인가에 중점을 둔 프로그래밍

선언형 프로그래밍
"무엇을" 할당할 것인가에 중점을 둔 프로그래밍

NaN: Not a Number

------------------------------------------------
배열 고차 함수
 -> 함수를 인자로 전달받거나 함수를 결과로 반환하는 함수
- sort, forEach
- map

 sqrt는 제곱근함수 roots= 

filter?
-> 걸러주는 역할을 하는 함수
-> 특정 조건을 만족하는 새로운 배열을 필요로 할 때 사용

reduce
->

some
->일부의 숫자를 넣고 비교를 했을 때 return 값보다 높으면 true 즉, 한개라도 만족하면 true가 나옴 만족하지 못하면 false
-> 결과는 boolean 타입으로 나옴

every
-> some은 한개라도 맞음 true이였지만
every는 모든 함수배열이 맞아야 true가 나옴

find
-> 배열에서 특정 값을 찾는 조건을 callback 함수를 통해 전달 조건에 맞는 값 중 첫번째 값을 리턴
-> 만족하는 값이 없으면 underfined

함수
하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록

반환문(return) ->return 값을 포함할 수 있고
함수 호이스팅
-> 함수 내 선언된 모든 변수는 함수 전체에 걸쳐 유효
    매개변수/인수???
매개변수 - 함수의 정의에서 전달 받는 인수를 함수 내부로 전달하기 위해 사용하는 것
변수인수 - 함수가 호출될 때 함수로 값을 전달해주는 값

arguments 객체

전역함수
 - 자바스크립트의 어떤 타입의 객체에서도 바로 사용 가능
eval() 	->문자열로 표현된 자바스크립트 코드를 실행하는 함수
isFinite()   -> 전달된 값이 유한한 수인지를 검사하여 그 결과 반환
isNaN()   -> 전달된 값이 NaN인지 검사하여 결과 반환
parseFloat() -> 문자열을 파싱하여 부동 소수점 수로 반환
parseInt()  -> 문자열을 파시이하여 정수로 반환

console.log(parseFloat('123.23144151').toFixed(3));   //소수점 자리를 몇째 자리까지 표기할건지

uri
url

객체
- 자바스크립트의 기본 타입은 객체
    -> 숫자, 문자열, 불리언, undefined 타입을 제외한 모든것이 객체
- 이름과 값(value)으로 구성된 property의 정렬되지 않은 집합?

값 참조
객체의 프로퍼티 참조
 -> 객체이름["프로퍼티이름"]
객체의 메소드 참조
  -> 객체이름.메소드이름()

호스트 객체
-> 브라우저 환경에서 제공하는 window, XmlHttpRequest,
HTMLElement 등의 DOM 노드객체와 같이 호스트 환경에 정의된 객체
BOM(Browser Object Model)
DOM(Document Object Model)

전역 객체/래퍼 객체

global object
 -> 미리 정의된 객체로 전역 프로퍼티나 전역 함수를 담는 공간
 -> 전역 범위(global scope)에서 this 연산자로 접근 가능
wrapper object
 -> 원시 타입의 프로퍼티에 접근하려고 할 때 생성되는 임시 객체

DOM(Document Object Model)
 -> 문서 내의 모든 요소를 정의하고 각각의 요소에 정의하고, 각각의 요소에 접근하는 방법 제공
  - Core , HTML, XML
Core - > 모든 문서 타입
XML -> XML 문서 타입

XML -> 데이터를 저장 후 전달 목적이며/ 저장되는 데이터의 구조를 기술하기 위한 언어

toPrecision -> 
let pi=3.1415925
pi.toPrecision(3)
 -> 3.14 3자리만 읽겟다는데 사용

정규표현식
{} << 반복
{n} 글자 수 n
{n,} n개 이상
{n,m}n이상 m이하



















